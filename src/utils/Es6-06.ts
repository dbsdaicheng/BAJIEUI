// 数组新增的方法
// 1.Array.from(): 将类似数组的对象和可遍历的对象转为真正的数组
//    如获取DOM操作返回的NodeList集合，以及函数内部的arguments对象。Array.from都可以将它们转换成真正的数组，然后操作数组的方法
//    
const likeArr = {
  '0': 'a',
  '1': 'b',
  '2': 'c',
  length: 3
}
const arr1 = Array.from(likeArr);
console.log(arr1);


// 2.Array.of(): 用于将一组值，转换为数组
Array.of(3, 11, 8);
Array.of(3);
//  这个方法主要是为了弥补Array()的不足，因为参数个数的不同，会导致Array()的行为有差异
Array(3) // (3) [empty × 3]
Array() // []
//  Array.of()总是返回参数值组成的数组，如果没有参数，就返回一个空数组


// 3.实例方法 copyWithin(), find(), findIndex(), fill(), includes(), flat(), flatMap(), at(), entires(), keys()和values()

// （1）copyWithin(): 在当前数组内部，将指定位置的成员复制到其他位置，然后返回当前数组。（会修改当前数组）
//      第一个参数： 从该位置开始替换数据，如果为负值，表示倒数
//      第二个参数： 从该位置开始读取数据，默认为0，如果为负值，表示从末尾开始计算
//      第三个参数： 到该位置前停止读取数据，默认等于数组长度，如果是负值，表示从末尾开始计算
        [ 1, 2, 3, 4, 5].copyWithin(0, 3) //[4, 5, 3, 4, 5]
//      从第三个位置开始读取数据，到5前停止读取数据，然后从0开始替换数组。也就是4,5 覆盖1，2

//  （2）find(): 找出第一个符合条件的数组成员，参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，
//               然后返回该成员，如果没有符合条件的成员，则返回undefined
//               回调函数接收三个参数：当前的值、当前的位置和原数组
        console.log([1, 2, 3, 7, 8, 9].find((item, index, arr) => item > 5)); //7
        console.log([1, 2, 3, 7, 8, 9].find((item, index, arr) => item > 10)); //undefined

//  （3）findIndex(): 返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1
        console.log([1, 2, 3, 7, 8, 9].findIndex((item, index, arr) => item > 5)); // 3
        console.log([1, 2, 3, 7, 8, 9].findIndex((item, index, arr) => item > 10)); // -1

//  （4）fill(): 使用给定值，填充一个数组
//      第一个参数：定值，用于填充数组
//      第二个参数：用于指定填充的起始位置
//      第三个参数：用于指定填充的结束位置
//      注意：如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象
        new Array(3).fill(7) // [7, 7, 7]

//  （5）includes(): 方法返回一个布尔值，表示数组是否包含给定值
//      第一个参数：定值，用于查询是否包含该定值
//      第二个参数：表示搜索的起始位置，默认为0，如果第二个参数为负数，则表示倒数的位置
        [1, 2, 3, 4, 5, 9].includes(2); // true

//  （6）flat(): 用于将嵌套的扁平化数组，变成一维数组，该方法返回一个新数组，对原数据没有影响
//      参数：表示需要扁平化的层数，默认为1
        [1, [2, 3, [ 4, 5]]].flat(2); //[1, 2, 3, 4, 5]
//      注意：如果原数组有空位，flat()方法会跳过空位。

//  （7）flatMap(): 对原数组的每个成员执行一个函数，然后对返回值组成的数组执行flat（）方法，该方法返回一个新数组
        [2, 3, 4].flatMap((x) => [x, x * 2])
//      表示将返回值组成的数组[[2, 4], [3, 6], [4, 8]] 执行flat()方法，返回[2, 4, 3, 6, 4, 8]
        [1, 2, 3, 4].flatMap(x => [[x * 2]])
//      表示将[[[2]], [[4]], [[6]], [[8]]].flat()

//  （8）entries()、keys()、values(): 用于遍历数组，都返回一个遍历器对象，可以使用for...of循环
//      keys是对键名的遍历， values是对键值的遍历， entries是对键值对的遍历
        for (let index of ['a', 'b'].keys()) {
          console.log(index);
        }
        // 0
        // 1

        for (let elem of ['a', 'b'].values()) {
          console.log(elem);
        }
        // 'a'
        // 'b'

        for (let [index, elem] of ['a', 'b'].entries()) {
          console.log(index, elem);
        }

//  （9）at()：支持数组的负索引
      const arrs = [5, 12, 8, 130, 44];
      arrs.at(2) // 8
      arrs.at(-2) // 130